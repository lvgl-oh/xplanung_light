# Generated by Django 4.2.21 on 2025-05-30 06:39

from django.conf import settings
import django.contrib.gis.db.models.fields
from django.db import migrations, models
import django.db.models.deletion
import simple_history.models
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='AdministrativeOrganization',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('generic_id', models.UUIDField(default=uuid.uuid4)),
                ('ls', models.CharField(default='07', help_text='Eindeutiger zweistelliger Schlüssel für das Bundesland - RLP: 07', max_length=2, verbose_name='Landesschlüssel')),
                ('ks', models.CharField(default='000', help_text='Eindeutiger dreistelliger Schlüssel für den Landkreis', max_length=3, verbose_name='Kreisschlüssel')),
                ('vs', models.CharField(default='00', help_text='Eindeutiger zweistelliger Schlüssel für den Gemeindeverband', max_length=2, verbose_name='Gemeindeverbandsschlüssel')),
                ('gs', models.CharField(default='000', help_text='Eindeutiger dreistelliger Schlüssel für die Gemeinde', max_length=3, verbose_name='Gemeindeschlüssel')),
                ('name', models.CharField(help_text='Offizieller Name der Gebietskörperschaft - z.B. Rhein-Lahn-Kreis', max_length=1024, verbose_name='Name der Gebietskörperschaft')),
                ('type', models.CharField(choices=[('KR', 'Landkreis'), ('KFS', 'Kreisfreie Stadt'), ('VG', 'Verbandsgemeinde'), ('VFG', 'Verbandsfreie Gemeinde'), ('GE', 'Gemeinde/Stadt'), ('UK', 'unbekannt')], db_index=True, default='UK', max_length=3, verbose_name='Typ der Gebietskörperschaft')),
                ('address_street', models.CharField(blank=True, help_text='Straße und Hausnummer', max_length=1024, null=True, verbose_name='Straße mit Hausnummer')),
                ('address_postcode', models.CharField(blank=True, help_text='Postleitzahl', max_length=5, null=True, verbose_name='Postleitzahl')),
                ('address_city', models.CharField(blank=True, max_length=256, null=True, verbose_name='Stadt')),
                ('address_phone', models.CharField(blank=True, max_length=256, null=True, verbose_name='Telefon')),
                ('address_facsimile', models.CharField(blank=True, max_length=256, null=True, verbose_name='Fax')),
                ('address_email', models.EmailField(blank=True, max_length=512, null=True, verbose_name='EMail')),
                ('address_homepage', models.URLField(blank=True, null=True, verbose_name='Homepage')),
                ('geometry', django.contrib.gis.db.models.fields.GeometryField(blank=True, null=True, srid=4326, verbose_name='Gebiet')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='HistoricalAdministrativeOrganization',
            fields=[
                ('id', models.BigIntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('generic_id', models.UUIDField(default=uuid.uuid4)),
                ('ls', models.CharField(default='07', help_text='Eindeutiger zweistelliger Schlüssel für das Bundesland - RLP: 07', max_length=2, verbose_name='Landesschlüssel')),
                ('ks', models.CharField(default='000', help_text='Eindeutiger dreistelliger Schlüssel für den Landkreis', max_length=3, verbose_name='Kreisschlüssel')),
                ('vs', models.CharField(default='00', help_text='Eindeutiger zweistelliger Schlüssel für den Gemeindeverband', max_length=2, verbose_name='Gemeindeverbandsschlüssel')),
                ('gs', models.CharField(default='000', help_text='Eindeutiger dreistelliger Schlüssel für die Gemeinde', max_length=3, verbose_name='Gemeindeschlüssel')),
                ('name', models.CharField(help_text='Offizieller Name der Gebietskörperschaft - z.B. Rhein-Lahn-Kreis', max_length=1024, verbose_name='Name der Gebietskörperschaft')),
                ('type', models.CharField(choices=[('KR', 'Landkreis'), ('KFS', 'Kreisfreie Stadt'), ('VG', 'Verbandsgemeinde'), ('VFG', 'Verbandsfreie Gemeinde'), ('GE', 'Gemeinde/Stadt'), ('UK', 'unbekannt')], db_index=True, default='UK', max_length=3, verbose_name='Typ der Gebietskörperschaft')),
                ('address_street', models.CharField(blank=True, help_text='Straße und Hausnummer', max_length=1024, null=True, verbose_name='Straße mit Hausnummer')),
                ('address_postcode', models.CharField(blank=True, help_text='Postleitzahl', max_length=5, null=True, verbose_name='Postleitzahl')),
                ('address_city', models.CharField(blank=True, max_length=256, null=True, verbose_name='Stadt')),
                ('address_phone', models.CharField(blank=True, max_length=256, null=True, verbose_name='Telefon')),
                ('address_facsimile', models.CharField(blank=True, max_length=256, null=True, verbose_name='Fax')),
                ('address_email', models.EmailField(blank=True, max_length=512, null=True, verbose_name='EMail')),
                ('address_homepage', models.URLField(blank=True, null=True, verbose_name='Homepage')),
                ('geometry', django.contrib.gis.db.models.fields.GeometryField(blank=True, null=True, srid=4326, verbose_name='Gebiet')),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField(db_index=True)),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'historical administrative organization',
                'verbose_name_plural': 'historical administrative organizations',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': ('history_date', 'history_id'),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
    ]
